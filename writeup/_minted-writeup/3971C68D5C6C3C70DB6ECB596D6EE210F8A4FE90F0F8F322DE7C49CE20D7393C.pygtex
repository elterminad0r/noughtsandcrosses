\begin{Verbatim}[commandchars=\\\{\}]
\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{Pretty\PYGZhy{}printing OXO boards, using pre\PYGZhy{}calculated templates.}
\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}

\PYG{k+kn}{from} \PYG{n+nn}{argparse} \PYG{k+kn}{import} \PYG{n}{ArgumentParser}
\PYG{k+kn}{from} \PYG{n+nn}{random} \PYG{k+kn}{import} \PYG{n}{choices}

\PYG{k}{def} \PYG{n+nf}{get\PYGZus{}args}\PYG{p}{():}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Get size of demo board in case of demo run}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{n}{parser} \PYG{o}{=} \PYG{n}{ArgumentParser}\PYG{p}{(}\PYG{n}{description}\PYG{o}{=}\PYG{n+nv+vm}{\PYGZus{}\PYGZus{}doc\PYGZus{}\PYGZus{}}\PYG{p}{)}
    \PYG{n}{parser}\PYG{o}{.}\PYG{n}{add\PYGZus{}argument}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}n\PYGZdq{}}\PYG{p}{,} \PYG{n+nb}{type}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{help}\PYG{o}{=}\PYG{l+s+s2}{\PYGZdq{}size of demo board\PYGZdq{}}\PYG{p}{)}
    \PYG{k}{return} \PYG{n}{parser}\PYG{o}{.}\PYG{n}{parse\PYGZus{}args}\PYG{p}{()}

\PYG{k}{def} \PYG{n+nf}{\PYGZus{}make\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{n}{n}\PYG{p}{):}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Do not use this function. Use get\PYGZus{}board\PYGZus{}template instead.}
\PYG{l+s+sd}{    Generate a str.format compatible template to format a noughts and crosses}
\PYG{l+s+sd}{    board. This is a lot easier and faster than dynamically generating all of}
\PYG{l+s+sd}{    the \PYGZdq{}structure\PYGZdq{} of the board every time.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{return} \PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZob{}\PYGZcb{}}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s+s2}{\PYGZob{}\PYGZcb{}\PYGZdq{}}
              \PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZdq{}}\PYG{o}{.}\PYG{n}{join}\PYG{p}{(}\PYG{n+nb}{map}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZob{}:4\PYGZcb{}\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{,} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n}{n}\PYG{p}{))),}
                  \PYG{l+s+s2}{\PYGZdq{}  \PYGZob{}\PYGZcb{}\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}+\PYGZdq{}}\PYG{o}{.}\PYG{n}{join}\PYG{p}{([}\PYG{l+s+s2}{\PYGZdq{}\PYGZhy{}\PYGZhy{}\PYGZhy{}\PYGZdq{}}\PYG{p}{]} \PYG{o}{*} \PYG{n}{n}\PYG{p}{))}
                     \PYG{o}{.}\PYG{n}{join}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+se}{\PYGZbs{}n\PYGZbs{}n}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}\PYG{o}{.}
                         \PYG{n}{join}\PYG{p}{(}\PYG{n+nb}{map}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZob{}0[0]:2\PYGZcb{}\PYGZob{}0[1]\PYGZcb{}\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{,}
                                  \PYG{n+nb}{enumerate}\PYG{p}{([}\PYG{l+s+s2}{\PYGZdq{}|\PYGZdq{}}\PYG{o}{.}\PYG{n}{join}\PYG{p}{([}\PYG{l+s+s2}{\PYGZdq{} \PYGZob{}\PYGZcb{} \PYGZdq{}}\PYG{p}{]} \PYG{o}{*} \PYG{n}{n}\PYG{p}{)]} \PYG{o}{*} \PYG{n}{n}\PYG{p}{)))))}

\PYG{c+c1}{\PYGZsh{} registry to cache templates}
\PYG{n}{BOARD\PYGZus{}REGISTRY} \PYG{o}{=} \PYG{p}{\PYGZob{}}\PYG{l+m+mi}{3}\PYG{p}{:} \PYG{n}{\PYGZus{}make\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{l+m+mi}{3}\PYG{p}{)\PYGZcb{}}

\PYG{k}{def} \PYG{n+nf}{get\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{n}{n}\PYG{p}{):}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Get a template by checking to see if it has already been calculated and}
\PYG{l+s+sd}{    cached, and otherwise doing so before returning it. This layer of}
\PYG{l+s+sd}{    abstraction prevents any arduous calculation on module import, but rather}
\PYG{l+s+sd}{    incurs a slight penalty on first usage of the function (which is more likely}
\PYG{l+s+sd}{    through another function).}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{if} \PYG{n}{n} \PYG{o+ow}{in} \PYG{n}{BOARD\PYGZus{}REGISTRY}\PYG{p}{:}
        \PYG{k}{return} \PYG{n}{BOARD\PYGZus{}REGISTRY}\PYG{p}{[}\PYG{n}{n}\PYG{p}{]}
    \PYG{k}{else}\PYG{p}{:}
        \PYG{n}{BOARD\PYGZus{}REGISTRY}\PYG{p}{[}\PYG{n}{n}\PYG{p}{]} \PYG{o}{=} \PYG{n}{\PYGZus{}make\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{n}{n}\PYG{p}{)}
        \PYG{k}{return} \PYG{n}{BOARD\PYGZus{}REGISTRY}\PYG{p}{[}\PYG{n}{n}\PYG{p}{]}

\PYG{k}{def} \PYG{n+nf}{strfboard}\PYG{p}{(}\PYG{n}{board}\PYG{p}{,} \PYG{n}{n}\PYG{p}{):}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Format standard board representation as string.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{return} \PYG{n}{get\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{n}{n}\PYG{p}{)}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{o}{*}\PYG{n+nb}{map}\PYG{p}{(}\PYG{n}{get\PYGZus{}sym}\PYG{p}{,} \PYG{n}{board}\PYG{p}{))}

\PYG{k}{def} \PYG{n+nf}{print\PYGZus{}board}\PYG{p}{(}\PYG{n}{board}\PYG{p}{,} \PYG{n}{n}\PYG{p}{):}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Print standard board representation as string.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{print}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZob{}\PYGZcb{}}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s+s2}{\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{strfboard}\PYG{p}{(}\PYG{n}{board}\PYG{p}{,} \PYG{n}{n}\PYG{o}{=}\PYG{n}{n}\PYG{p}{)))}

\PYG{n}{syms} \PYG{o}{=} \PYG{l+s+s2}{\PYGZdq{}OX\PYGZdq{}}

\PYG{k}{def} \PYG{n+nf}{get\PYGZus{}sym}\PYG{p}{(}\PYG{n}{i}\PYG{p}{):}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Translate (None, True, False) to \PYGZdq{} XO\PYGZdq{}}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{if} \PYG{n}{i} \PYG{o+ow}{is} \PYG{n+nb+bp}{None}\PYG{p}{:}
        \PYG{k}{return} \PYG{l+s+s2}{\PYGZdq{} \PYGZdq{}}
    \PYG{k}{return} \PYG{n}{syms}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}

\PYG{k}{if} \PYG{n+nv+vm}{\PYGZus{}\PYGZus{}name\PYGZus{}\PYGZus{}} \PYG{o}{==} \PYG{l+s+s2}{\PYGZdq{}\PYGZus{}\PYGZus{}main\PYGZus{}\PYGZus{}\PYGZdq{}}\PYG{p}{:}
    \PYG{n}{args} \PYG{o}{=} \PYG{n}{get\PYGZus{}args}\PYG{p}{()}
    \PYG{n}{n} \PYG{o}{=} \PYG{n}{args}\PYG{o}{.}\PYG{n}{n}
    \PYG{k}{print}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZob{}0\PYGZcb{}x\PYGZob{}0\PYGZcb{} template:}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s+s2}{\PYGZob{}1\PYGZcb{}\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{n}\PYG{p}{,} \PYG{n}{get\PYGZus{}board\PYGZus{}template}\PYG{p}{(}\PYG{n}{n}\PYG{p}{)))}
    \PYG{k}{print}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s+s2}{random \PYGZob{}0\PYGZcb{}x\PYGZob{}0\PYGZcb{} board:\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{n}\PYG{p}{))}
    \PYG{k}{print}\PYG{p}{(}\PYG{n}{strfboard}\PYG{p}{(}\PYG{n}{choices}\PYG{p}{([}\PYG{n+nb+bp}{None}\PYG{p}{,} \PYG{n+nb+bp}{True}\PYG{p}{,} \PYG{n+nb+bp}{False}\PYG{p}{],} \PYG{n}{k}\PYG{o}{=}\PYG{n}{n}\PYG{o}{**}\PYG{l+m+mi}{2}\PYG{p}{),} \PYG{n}{n}\PYG{o}{=}\PYG{n}{n}\PYG{p}{))}
\end{Verbatim}
